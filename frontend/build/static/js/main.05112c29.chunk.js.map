{"version":3,"sources":["components/Card.js","components/store/reducers.js","components/store/configureStore.js","components/App.js","index.js"],"names":["React","Component","combineReducers","error","state","action","type","loading","cards","initialState","App","this","props","fetchData","console","log","className","connect","dispatch","url","axios","get","then","res","data","catch","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"sTAGmBA,IAAMC,U,gBCuGVC,gCAAgB,CAC3BC,MA5BG,WAAuC,IAAxBC,EAAuB,wDAARC,EAAQ,uCAC3C,OAAQA,EAAOC,MACb,IAxEoB,kBAyElB,OAAOD,EAAOF,MAChB,QACE,OAAOC,IAwBTG,QApBG,WAAyC,IAAxBH,EAAuB,wDAARC,EAAQ,uCAC7C,OAAQA,EAAOC,MACb,IAnFsB,oBAoFpB,OAAOD,EAAOE,QAChB,QACE,OAAOH,IAgBTI,MAZG,WAAoC,IAArBJ,EAAoB,uDAAZ,GAAIC,EAAQ,uCACxC,OAAQA,EAAOC,MACb,IA3FsB,oBA4FpB,OAAOD,EAAOG,MAChB,QACE,OAAOJ,M,UCjG0BK,ECCjCC,E,mLAIFC,KAAKC,MAAMC,UADC,yE,+BAMZC,QAAQC,IAAIJ,KAAKC,OADV,MAE2BD,KAAKC,MAA/BL,EAFD,EAECA,QAASJ,EAFV,EAEUA,MAAOK,EAFjB,EAEiBA,MAExB,OACE,yBAAKQ,UAAU,OACb,6BACE,yBAAKA,UAAU,UACb,8CAIF,yBAAKA,UAAU,oBACZT,EAAU,aAAeJ,EAAQ,wCAA0CK,S,GArBtEP,aA2CHgB,eAdS,SAACb,GACvB,MAAO,CACLI,MAAOJ,EAAMI,MACbL,MAAOC,EAAMD,MACbI,QAASH,EAAMG,YAIQ,SAACW,GAC1B,MAAO,CACLL,UAAW,SAACM,GAAD,OAASD,GFXf,SAACA,GACNA,EAvBK,CACLZ,KANsB,oBAOtBC,SAqByB,IACzBa,IAAMC,IAHM,uCAIXC,MAAK,SAAAC,GAEJ,OADAT,QAAQC,IAAIQ,GACLA,EAAIC,QAEZC,OAAM,SAAUtB,GACfW,QAAQC,IAAIZ,aEOHc,CAA6CP,GC3CtDgB,EFAKC,sBACHzB,EACAO,EACAmB,8BACEC,0BAAgBC,OEF1BC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,eAAe,W","file":"static/js/main.05112c29.chunk.js","sourcesContent":["import React from 'react';\nimport './css/Card.css';\n\nclass Card extends React.Component {\n\n  render() {\n    let author = this.props.author;\n    let authorName = author.substring(author.lastIndexOf('(\"')+2, author.lastIndexOf('\")'));\n    return (\n      <div className=\"card\">\n        <figure className=\"card_content\">         \n          <figcaption>\n            <div className=\"description\" \n              dangerouslySetInnerHTML={{ __html: this.props.description }} \n            />\n            <h3 className=\"title\">\n              <a href={this.props.imageLink} title={this.props.title}>\n                {this.props.title}\n              </a>\n              by {authorName}\n            </h3>\n            <div className=\"tags\">\n              {this.props.tags ? 'Tags: ' + this.props.tags.replace(/\\s+/g, \", \") : \"\"}\n            </div>\n          </figcaption>\n        </figure>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n\n\n","import React from 'react';\nimport { combineReducers } from 'redux';\nimport fetchJsonp from 'fetch-jsonp';\nimport Card from '../Card';\nimport axios from 'axios'\n\n\nconst GET_IMAGE_LOADING = 'GET_IMAGE_LOADING';\nconst GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nconst GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\n\nexport function getImageLoading(bool) {\n  return {\n    type: GET_IMAGE_LOADING,\n    loading: bool\n  };\n}\n\nexport function getImageSuccess(cards) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    cards\n  };\n}\n\nexport function getImageError(bool) {\n  return {\n    type: GET_IMAGE_ERROR,\n    error: bool\n  };\n}\n\nexport function getImage(url) {\n  const api_path = `http://localhost:5000/api/getImage/`\n  return (dispatch) => {\n    dispatch(getImageLoading(true));\n    axios.get(api_path)\n    .then(res => {\n      console.log(res)\n      return res.data;\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n\n\n    // let fetch = api => fetchJsonp(url, {\n    //   jsonpCallback: ' ',\n    //   jsonpCallbackFunction: 'jsonFlickrFeed'\n    // })\n\n    // fetch(url)\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw Error(response.statusText);\n    //     }\n    //     dispatch(getImageLoading(false));\n    //     return response;\n    //   })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     let cards = [];\n    //     cards = data.items.map((card, index) => (\n    //       <Card\n    //         key={index}\n    //         author={card.author}\n    //         title={card.title}\n    //         description={card.description}\n    //         image={card.media.m}\n    //         tags={card.tags}\n    //       />\n    //     ))\n\n    //     dispatch(getImageSuccess(cards))\n    //   })\n    //   .catch(() => dispatch(getImageError(true)));\n  };\n}\n\nexport function error(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_ERROR:\n      return action.error;\n    default:\n      return state;\n  }\n}\n\nexport function loading(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_LOADING:\n      return action.loading;\n    default:\n      return state;\n  }\n}\n\nexport function cards(state = [], action) {\n  switch (action.type) {\n    case GET_IMAGE_SUCCESS:\n      return action.cards;\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n    error,\n    loading,\n    cards\n});","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport combineReducers from './reducers';\n\nexport default function configureStore(initialState) {\n    return createStore(\n        combineReducers,\n        initialState,\n        composeWithDevTools(\n          applyMiddleware(thunk)\n        )\n    );\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getImage } from './store/reducers';\n\nimport './css/App.css';\n\nclass App extends Component {\n\n  componentWillMount() {\n    const url = 'https://api.flickr.com/services/feeds/photos_public.gne?format=json';\n    this.props.fetchData(url);\n\n  }\n\n  render() {\n    console.log(this.props);\n    const { loading, error, cards } = this.props;\n\n    return (\n      <div className=\"App\">\n        <div>\n          <div className=\"header\">\n            <h2>\n                Flickr Images\n            </h2>\n          </div>\n          <div className=\"content flexWrap\">\n            {loading ? 'Loading...' : error ? 'OOPS!!! There was an error connection' : cards}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cards: state.cards,\n    error: state.error,\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchData: (url) => dispatch(getImage(url))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './components/store/configureStore';\n\nimport App from './components/App';\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}